
let CryptoJS = require("crypto-js");	//加密js

/* CRC16-IBM 表格 */
const CrcArcTab = [0x0000,0xC0C1,0xC181,0x0140,0xC301,0x03C0,0x0280,0xC241,0xC601,0x06C0,0x0780,
	0xC741,0x0500,0xC5C1,0xC481,0x0440,0xCC01,0x0CC0,0x0D80,0xCD41,0x0F00,0xCFC1,0xCE81,0x0E40,
	0x0A00,0xCAC1,0xCB81,0x0B40,0xC901,0x09C0,0x0880,0xC841,0xD801,0x18C0,0x1980,0xD941,0x1B00,
	0xDBC1,0xDA81,0x1A40,0x1E00,0xDEC1,0xDF81,0x1F40,0xDD01,0x1DC0,0x1C80,0xDC41,0x1400,0xD4C1,
	0xD581,0x1540,0xD701,0x17C0,0x1680,0xD641,0xD201,0x12C0,0x1380,0xD341,0x1100,0xD1C1,0xD081,
	0x1040,0xF001,0x30C0,0x3180,0xF141,0x3300,0xF3C1,0xF281,0x3240,0x3600,0xF6C1,0xF781,0x3740,
	0xF501,0x35C0,0x3480,0xF441,0x3C00,0xFCC1,0xFD81,0x3D40,0xFF01,0x3FC0,0x3E80,0xFE41,0xFA01,
	0x3AC0,0x3B80,0xFB41,0x3900,0xF9C1,0xF881,0x3840,0x2800,0xE8C1,0xE981,0x2940,0xEB01,0x2BC0,
	0x2A80,0xEA41,0xEE01,0x2EC0,0x2F80,0xEF41,0x2D00,0xEDC1,0xEC81,0x2C40,0xE401,0x24C0,0x2580,
	0xE541,0x2700,0xE7C1,0xE681,0x2640,0x2200,0xE2C1,0xE381,0x2340,0xE101,0x21C0,0x2080,0xE041,
	0xA001,0x60C0,0x6180,0xA141,0x6300,0xA3C1,0xA281,0x6240,0x6600,0xA6C1,0xA781,0x6740,0xA501,
	0x65C0,0x6480,0xA441,0x6C00,0xACC1,0xAD81,0x6D40,0xAF01,0x6FC0,0x6E80,0xAE41,0xAA01,0x6AC0,
	0x6B80,0xAB41,0x6900,0xA9C1,0xA881,0x6840,0x7800,0xB8C1,0xB981,0x7940,0xBB01,0x7BC0,0x7A80,
	0xBA41,0xBE01,0x7EC0,0x7F80,0xBF41,0x7D00,0xBDC1,0xBC81,0x7C40,0xB401,0x74C0,0x7580,0xB541,
	0x7700,0xB7C1,0xB681,0x7640,0x7200,0xB2C1,0xB381,0x7340,0xB101,0x71C0,0x7080,0xB041,0x5000,
	0x90C1,0x9181,0x5140,0x9301,0x53C0,0x5280,0x9241,0x9601,0x56C0,0x5780,0x9741,0x5500,0x95C1,
	0x9481,0x5440,0x9C01,0x5CC0,0x5D80,0x9D41,0x5F00,0x9FC1,0x9E81,0x5E40,0x5A00,0x9AC1,0x9B81,
	0x5B40,0x9901,0x59C0,0x5880,0x9841,0x8801,0x48C0,0x4980,0x8941,0x4B00,0x8BC1,0x8A81,0x4A40,
	0x4E00,0x8EC1,0x8F81,0x4F40,0x8D01,0x4DC0,0x4C80,0x8C41,0x4400,0x84C1,0x8581,0x4540,0x8701,
	0x47C0,0x4680,0x8641,0x8201,0x42C0,0x4380,0x8341,0x4100,0x81C1,0x8081,0x4040
];

/* --------------------公共方法开始---------------- */
const getTheBit = (num,num2,bitStr) =>{	//num第几个字节开始，num2取几位，bitStr为需要操作的字符串，可不传，获取该字节的16进制数字（返回的数为对应的10进制数）
	return parseInt(('0x'+ bitStr.substr((num - 1) * 2,num2 * 2)));
};
const judgeBit = (strBit) =>{ //如果该字节转化为16进制长度为1，则前面补0
	if(strBit.length == 1){
		return '0'+strBit;
	}else{
		return strBit;
	}
};
/* --------------------公共方法开结束---------------- */

/* --------------获取CRC16-IBM 开始-----------------*/
const getCRC16_IBM = (mac) =>{	//获取CRC16-IBM值
	let crc16 = Hex16(CrcArcStr(mac)).split('0x')[1];	//crc16值
	console.log('CRC16-IBM校验值: '+crc16); 
	return '123443432d333554'+ mac +''+ crc16;
};
const CrcArcAdd = (crc,c) =>{
	return CrcArcTab[(crc ^ c) & 0xFF] ^ ((crc >> 8) & 0xFF);
};
const CrcArcStr = (mac) =>{
	let str = '123443432d333554'+ mac;
	let crc = 0;
	let len = str.length / 2
	for (let n = 0; n < len; n++){	
		crc = CrcArcAdd(crc, getTheBit((n+1),1,str));
	}
	return crc;
};
const Hex16 = (val) =>{
	let n = val & 0xFFFF;
	let str = n.toString(16).toUpperCase();
	n = str.length;
	if (n < 2) str = "000" + str;
	else if (n < 3) str = "00" + str;
	else if (n < 4) str = "0" + str;
	return "0x" + str;
};
/* --------------获取CRC16-IBM 结束-----------------*/

/* ------------------五个算法开始 ----------------*/
const func = (Num,hex) =>{
	if(Num == 1){
		return macAES_1(hex)
	}else if(Num == 2){
		return macAES_2(hex)
	}else if(Num == 3){
		return macAES_3(hex)
	}else if(Num == 4){
		return macAES_4(hex)
	}else if(Num == 5){
		return macAES_5(hex)
	}
}
const macAES_1 = (hex) =>{	//加密算法1 
	let result = '';	//算法结果
	
	return result;
	
};
const macAES_2 = (hex) =>{	//加密算法2	
	let result = '';	//算法结果
	
	return result;
};
const macAES_3 = (hex) =>{	//加密算法3 
	let result = '';	//算法结果
	
	return result;
};
const macAES_4 = (hex) =>{//加密算法4,	
	let result = '';	//算法结果
	
	return result;
};
const macAES_5 = (hex) =>{//加密算法5, 
	let result = '';	//算法结果
	
	return result;
};
/* ------------------五个算法结束 ----------------*/

/* --------------AES加密解密开始------------- */
const Encrypt = (thekey,word) =>{	//加密算法
	let key = CryptoJS.enc.Hex.parse(thekey);
	let srcs = CryptoJS.enc.Hex.parse(word);
	let encrypted = CryptoJS.AES.encrypt(word, key, {
		mode : CryptoJS.mode.ECB,
		padding : CryptoJS.pad.ZeroPadding,
	});
	return encrypted.toString(); 
};
const getEncryptResult = (thekey,word) =>{	//获取加密结果
	let encrypyStr = Encrypt(thekey,word);
	let ArrayBuffer = Buffer.from(encrypyStr, 'base64');
	let result = '';
	for(let k = 0; k < ArrayBuffer.length ; k++){	//将字符串转化为16进制
		result += judgeBit(ArrayBuffer[k].toString(16));
	} 
	return result;
};
const Decrypt = (thekey,word) =>{	//解密算法
	let key = CryptoJS.enc.Hex.parse(thekey);
	let decrypt = CryptoJS.AES.decrypt(word, key, {
		mode : CryptoJS.mode.ECB,
		padding : CryptoJS.pad.ZeroPadding,
	});
	return CryptoJS.enc.Utf8.stringify(decrypt).toString();
};
const getDecryptResult = (thekey,word) =>{	//获取解密结果
	let encrypyStrs = Decrypt(thekey,word);
	return encrypyStrs;
};
/* --------------AES加密解密结束------------- */

export default {
	getCRC16_IBM,
	getDecryptResult,
	getEncryptResult,
	macAES_1,
	macAES_2,
	macAES_3,
	macAES_4,
	macAES_5,
	func,
}